<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:alicfg.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="30"/>
        <!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出 SQLException,如设为0则无限期等待。单位毫秒。Default:
            0 -->
        <property name="checkoutTimeout" value="5000"/>
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="60"/>
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="30"/>
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="60"/>
        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="150"/>
        <property name="minPoolSize" value="20"/>
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.search.default.directory_provider">
                    org.hibernate.search.store.impl.FSDirectoryProvider
                </prop>
                <!--centos 路径:/www/index-->
                <prop key="hibernate.search.default.indexBase">E:/index</prop>
            </props>
        </property>
        <property name="mappingDirectoryLocations">
            <list>
                <value>classpath:cn/iliker/mall/mappings</value>
            </list>
        </property>
    </bean>
    <!--定义事务管理器 -->
    <bean id="txManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!--定义事务增强，并指定事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="search*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="save*"/>
            <tx:method name="refunds*"/>
            <tx:method name="transfer*"/>
            <tx:method name="confirm*"/>
            <tx:method name="add*"/>
            <tx:method name="edit*"/>
            <tx:method name="bind*"/>
            <tx:method name="execute*"/>
            <tx:method name="batch*"/>
            <tx:method name="attach*"/>
            <tx:method name="del*"/>
            <tx:method name="update*"/>
            <tx:method name="do*"/>
            <tx:method name="*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <bean id="myAspect" class="cn.iliker.mall.aops.UserLogger_xml" p:userAccountDAO-ref="userAccountDAO"
          p:userinfoDAO-ref="userInfoDAO"/>
    <!--定义切面 -->
    <aop:config>
        <!--定义切入点 -->
        <aop:pointcut expression="execution(* cn.iliker.mall.service.impl.*.*(..))" id="serviceMethod"/>
        <aop:pointcut expression="execution(* cn.iliker.mall.service.impl.UserinfoSvcImpl.save(..))" id="recommended"/>
        <aop:pointcut expression="execution(* cn.iliker.mall.service.impl.UserAccountSvcImpl.updateOrderStatus(..))" id="commission"/>
        <!--将事务增强与切入点结合 -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethod"/>
        <aop:aspect ref="myAspect">
            <!--前置增强-->
            <!--<aop:before method="before" pointcut-ref="serviceMethod"/>-->
            <!--用户注册后置增强-->
            <aop:after-returning method="afterReturning" pointcut-ref="recommended" returning="returnvalue"/>
            <!--分佣后置增强-->
            <aop:after-returning method="afterCommission" pointcut-ref="commission" returning="returnvalue"/>
            <!--计算等级最终增强-->
            <aop:after method="after" pointcut-ref="commission"/>
            <!--环绕增强-->
            <!--<aop:around method="around" pointcut-ref="commission"/>-->
            <aop:after-throwing method="afterThrowing" pointcut-ref="recommended"/>
        </aop:aspect>
    </aop:config>
</beans>